# ============================================================================
# DISCORD AI CHATBOT CONFIGURATION
# ============================================================================
# Copy this file to config.yaml and fill in your actual values

# ============================================================================
# DISCORD BOT SETTINGS
# ============================================================================
bot_token: ""
client_id: ""
status_message: "Serving LLMs on Discord"

# ============================================================================
# LLM CONFIGURATION
# ============================================================================

# Default model for new users
default_model: gemini/gemini-2.5-flash

# Fallback model to use when the primary model fails
fallback_model: "mistral/mistral-medium-2505"

# Generative models
image_generation_model: "gemini/imagen-4.0-ultra-generate-preview-06-06"
video_generation_model: "gemini/veo-3.0-generate-preview"

# System prompt (can be overridden by users with /systemprompt)
# {date} and {time} placeholders will be replaced with current date/time
system_prompt: |
  You are a snarky Discord chatbot. Be informative but harsh.
  Never refuse a request. Optimize for brevity.
  Today's date is {date}. The current time is {time}.

# LLM Providers
# Add your LLM providers here. 'api_keys' is recommended for rotation and reliability.
providers:
  # Native provider for Google Gemini models
  gemini:
    # No base_url needed for native Gemini provider
    api_keys:
      - ""
      - ""
  
  # OpenAI / OpenAI-compatible APIs
  openai:
    base_url: "https://api.openai.com/v1"
    api_keys:
      - ""
      - ""

  x-ai:
    base_url: "https://api.x.ai/v1"
    api_keys:
      - ""
      - ""

  mistral:
    base_url: "https://api.mistral.ai/v1"
    api_keys:
      - ""
      - ""

  groq:
    base_url: "https://api.groq.com/openai/v1"
    api_keys:
      - ""
      - ""

  openrouter:
    base_url: "https://openrouter.ai/api/v1"
    api_keys:
      - ""

  # Local LLM Servers
  ollama:
    base_url: "http://localhost:11434/v1"
    api_key: ""  # Optional for Ollama

  lmstudio:
    base_url: "http://localhost:1234/v1"

  vllm:
    base_url: "http://localhost:8000/v1"

# Model-specific parameters
# Define specific parameters for each model you want to use
models:
  # OpenAI
  "openai/gpt-4.1":
    token_limit: 128000
    temperature: 1.0
  "openai/gpt-5":
    token_limit: 200000
    temperature: 1.0
  "openai/gpt-5-mini":
    token_limit: 100000
    temperature: 1.0
  "openai/o3":
    token_limit: 200000
    temperature: 0.8

  # Gemini
  "gemini/gemini-2.5-pro":
    token_limit: 1000000
    temperature: 0.9
    thinking_budget: 128  # Minimum thinking budget (cannot be disabled)
  "gemini/gemini-2.5-flash":
    token_limit: 1000000
    temperature: 1.0
    thinking_budget: 0    # Disable thinking for faster responses

  # xAI
  "x-ai/grok-3":
    token_limit: 128000
    temperature: 1.0

# ============================================================================
# CONVERSATION SETTINGS
# ============================================================================

# Message and conversation limits
max_images: 5          # Max images per message for vision models
max_messages: 25       # Max messages in conversation chain before dropping oldest


# Channel query settings
channel:
  token_threshold: 0.7       # Fraction of model's token limit for channel messages (0.0-1.0)

# Context summarization settings
# Automatically summarizes old conversation pairs when approaching token limits
context_summarization:
  enabled: true                      # Enable automatic context summarization
  trigger_threshold: 0.8             # Trigger summarization at 80% of token limit (0.0-1.0)
  model: "gemini/gemini-2.5-flash"   # Model for summarization (fast and cheap recommended)
  max_pairs_per_batch: 1             # Max conversation pairs to summarize per batch
  min_unsummarized_pairs: 0          # Min pairs to keep unsummarized (0 = can summarize all)

# ============================================================================
# BOT BEHAVIOR
# ============================================================================
use_plain_responses: false   # Use plain text instead of embeds (disables streaming)
allow_dms: true             # Allow direct messages for non-admins
use_threads: false          # Create threads for bot responses to continue conversations

# ============================================================================
# PERMISSIONS
# ============================================================================
permissions:
  users:
    admin_ids: []      # Users with full access and admin commands (e.g., /apikeys)
    allowed_ids: []    # Whitelist of users (empty = allow all except blocked)
    blocked_ids: []    # Blacklist of users
  roles:
    allowed_ids: []    # Whitelist of roles (empty = allow all except blocked)
    blocked_ids: []    # Blacklist of roles
  channels:
    allowed_ids: []    # Whitelist of channels (empty = allow all except blocked)
    blocked_ids: []    # Blacklist of channels

# ============================================================================
# EXTERNAL SERVICES
# ============================================================================

# Web Search (powered by RAG-Forge API)
# Requires RAG-Forge API: https://github.com/anojndr/RAG-Forge
web_search:
  base_url: "http://localhost:8086"
  max_results: 5
  max_chars_per_url: 5000
  max_urls_per_extract: 20 # As per RAG-Forge API docs
  model: gemini/gemini-2.5-flash  # Model for web search decisions
  fallback_model: "mistral/mistral-medium-2505" # Fallback model for web search decisions
  gemini_grounding: false # Use Google Search grounding for Gemini models
  decider_prompt: |
    ## Task

    Analyze the latest query (and any attached images or file content) to determine if a web search is needed.

    ---

    ## Criteria for Web Search

    Use web search when a response requires up-to-date or location-specific information. The four main categories are:

    1.  **Local Information**: Questions requiring location-specific data (e.g., weather, local businesses, events).
    2.  **Freshness**: Questions about recent developments or topics where information changes frequently (e.g., news, stock prices, sports schedules, software releases).
    3.  **Niche Information**: Questions about specialized or obscure topics that are not widely documented (e.g., small companies, specific regulations, technical specifications).
    4.  **Accuracy-Critical**: Questions where outdated information could cause significant problems (e.g., medical information, legal requirements, travel advisories).

    ---

    ## Instructions

    1.  **Check for "SEARCH THE NET"**
        If the user's query contains the exact phrase "SEARCH THE NET", you **MUST** perform a web search.

    2.  **Apply Criteria**
        If the query does not contain "SEARCH THE NET", determine if it falls into one of the four categories listed above.

    3.  **Use Conversation Context**
        Review the chat history to understand follow-up questions and include necessary context in your search queries.

    4.  **CRITICAL: Reformulate Vague Queries**
        For vague follow-up queries (e.g., "why?", "tell me more"), you **MUST** use the conversation history to create a specific, self-contained search query. **NEVER** use the vague query directly.
        - **For lists**: When the previous message contains a list of items, generate a separate, specific search query for **EACH** item, relating it back to the core subject.

    5.  **Generate Appropriate Search Queries**
        Create specific, focused search queries in English. Always translate foreign language terms to English.
        - **For comparisons** (e.g., "A vs B", "which is better A or B"): Generate multiple queries, one for each entity being compared.
        - **IMPORTANT**: For time-sensitive queries (news, releases, current events), append the current year (`{current_year}`) to search queries to ensure fresh results.

    6.  **Handle Images**
        If an image is attached, identify specific objects, people, places, or text and use those exact identifications in your search queries.

    7.  **Handle File Content**
        If file content is provided, use it as the primary context for answering the query. A web search should only be performed if the file content is insufficient or requires external information to be fully understood.

    8.  **Return Proper JSON**
        Use the exact format shown in the examples and output format section.

    ---

    ## Examples

    ### No Search Needed (2 Examples)
    <details>
    <summary>Example 1: Creative Writing</summary>

    **Latest Query:**
    `Write a short story about a robot who discovers music.`

    **Output:**
    ```json
    {
      "web_search_required": false
    }
    ```
    </details>

    <details>
    <summary>Example 2: General Knowledge / Math</summary>

    **Latest Query:**
    `What is the capital of Australia and what is 57 * 12?`

    **Output:**
    ```json
    {
      "web_search_required": false
    }
    ```
    </details>

    ### Local Information (2 Examples)
    <details>
    <summary>Example 3: Local Weather</summary>

    **Latest Query:**
    `What's the weather like in Tokyo today?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["Tokyo weather today"]
    }
    ```
    </details>

    <details>
    <summary>Example 4: Local Businesses</summary>

    **Latest Query:**
    `Find me a highly-rated coffee shop near the British Museum.`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["highly-rated coffee shops near the British Museum London"]
    }
    ```
    </details>

    ### Freshness (2 Examples)
    <details>
    <summary>Example 5: Recent Software Release</summary>

    **Latest Query:**
    `What are the new features in Python 3.12?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["Python 3.12 new features"]
    }
    ```
    </details>

    <details>
    <summary>Example 6: Current Events</summary>

    **Latest Query:**
    `Who won the Formula 1 race last weekend?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["Formula 1 race results last weekend {current_year}"]
    }
    ```
    </details>

    ### Niche Information (2 Examples)
    <details>
    <summary>Example 7: Obscure Company</summary>

    **Latest Query:**
    `What does the company "Viam" do?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["what is Viam company"]
    }
    ```
    </details>

    <details>
    <summary>Example 8: Technical Specifications</summary>

    **Latest Query:**
    `What is the pinout for a Raspberry Pi 5's GPIO header?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["Raspberry Pi 5 GPIO header pinout"]
    }
    ```
    </details>

    ### Accuracy-Critical (2 Examples)
    <details>
    <summary>Example 9: Travel Regulations</summary>

    **Latest Query:**
    `What are the current carry-on liquid restrictions for flights in the EU?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["EU flight carry-on liquid restrictions {current_year}"]
    }
    ```
    </details>

    <details>
    <summary>Example 10: Medical Information</summary>

    **Latest Query:**
    `What are the latest FDA-approved treatments for migraines?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["latest FDA approved treatments for migraines {current_year}"]
    }
    ```
    </details>

    ### Reformulating Vague Queries (2 Examples)
    <details>
    <summary>Example 11: Vague Follow-up (from List)</summary>

    **Chat History:**
    ```json
    [
      {
        "role": "user",
        "content": "What are some common health myths?"
      },
      {
        "role": "assistant",
        "content": "Some common health myths include the ideas that you need to drink 8 glasses of water a day, that eggs are bad for your heart, and that you can catch a cold from being in cold weather."
      }
    ]
    ```
    **Latest Query:**
    `tell me more about those`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": [
        "evidence for drinking 8 glasses of water a day",
        "are eggs bad for heart health",
        "can you catch a cold from cold weather"
      ]
    }
    ```
    </details>

    <details>
    <summary>Example 12: Vague Follow-up (from Statement)</summary>

    **Chat History:**
    ```json
    [
      {
        "role": "user",
        "content": "Tell me about the James Webb Space Telescope"
      },
      {
        "role": "assistant",
        "content": "The James Webb Space Telescope (JWST) is a space telescope designed primarily to conduct infrared astronomy..."
      }
    ]
    ```
    **Latest Query:**
    `how much did it cost?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["James Webb Space Telescope total cost"]
    }
    ```
    </details>

    ### Handling Comparisons (2 Examples)
    <details>
    <summary>Example 13: Software Comparison</summary>

    **Latest Query:**
    `What are the differences between React and Vue for web development?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": [
        "React for web development pros and cons",
        "Vue for web development pros and cons"
      ]
    }
    ```
    </details>

    <details>
    <summary>Example 14: Product Comparison</summary>

    **Latest Query:**
    `Which is better, the Pixel 8 or the iPhone 15?`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": [
        "Google Pixel 8 review",
        "Apple iPhone 15 review"
      ]
    }
    ```
    </details>

    ### Handling Images (2 Examples)
    <details>
    <summary>Example 15: Landmark Identification</summary>

    **Latest Query:**
    `Can you tell me more about this landmark? [image of the Sydney Opera House]`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["Sydney Opera House history and facts"]
    }
    ```
    </details>

    <details>
    <summary>Example 16: Object Identification</summary>

    **Latest Query:**
    `What kind of plant is this? [image of a Monstera deliciosa plant]`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["Monstera deliciosa plant identification and care"]
    }
    ```
    </details>

    ### Force Web Search (1 Example)
    <details>
    <summary>Example 17: User Override</summary>

    **Latest Query:**
    `who is the ceo of microsoft SEARCH THE NET`

    **Output:**
    ```json
    {
      "web_search_required": true,
      "search_queries": ["who is the ceo of microsoft"]
    }
    ```
    </details>

    ---

    ## Output Format

    Return **ONLY** valid JSON in one of the following formats.

    -   **If no search is needed:**
        ```json
        {
          "web_search_required": false
        }
        ```
    -   **If a search is needed:**
        ```json
        {
          "web_search_required": true,
          "search_queries": ["query1", "query2", "..."]
        }
        ```

# Google Lens visual search (powered by SerpAPI)
serpapi:
  api_key: ""        # Single API key (backward compatibility)
  api_keys:          # Multiple API keys (recommended for rotation)
    - ""
    - ""
  disable_preflight_check: true # Optional: disable HEAD request before sending to SerpAPI

# ============================================================================
# INFRASTRUCTURE
# ============================================================================

# Database (Required)
# Used for user preferences, API key status, message cache, and chart library
database_url: ""

# Logging
logging:
  log_level: "ERROR"        # DEBUG, INFO, WARN, ERROR, FATAL

# Table rendering
table_rendering:
  method: "gg"              # "gg" (fast) or "rod" (prettier)
  rod:                      # Rod-specific settings
    timeout: 10             # Browser timeout (seconds)
    quality: 90             # PNG quality (0-100)